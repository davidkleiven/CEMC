# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ce_updater', [dirname(__file__)])
        except ImportError:
            import _ce_updater
            return _ce_updater
        if fp is not None:
            try:
                _mod = imp.load_module('_ce_updater', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ce_updater = swig_import_helper()
    del swig_import_helper
else:
    import _ce_updater
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



_ce_updater.Status_t_READY_swigconstant(_ce_updater)
Status_t_READY = _ce_updater.Status_t_READY

_ce_updater.Status_t_INIT_FAILED_swigconstant(_ce_updater)
Status_t_INIT_FAILED = _ce_updater.Status_t_INIT_FAILED

_ce_updater.Status_t_NOT_INITIALIZED_swigconstant(_ce_updater)
Status_t_NOT_INITIALIZED = _ce_updater.Status_t_NOT_INITIALIZED
class CEUpdater(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ce_updater.new_CEUpdater()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ce_updater.delete_CEUpdater
    __del__ = lambda self: None

    def copy(self):
        return _ce_updater.CEUpdater_copy(self)

    def init(self, BC, corrFunc, ecis, permutations):
        return _ce_updater.CEUpdater_init(self, BC, corrFunc, ecis, permutations)

    def ok(self):
        return _ce_updater.CEUpdater_ok(self)

    def get_energy(self):
        return _ce_updater.CEUpdater_get_energy(self)

    def update_cf(self, *args):
        return _ce_updater.CEUpdater_update_cf(self, *args)

    def spin_product_one_atom(self, ref_indx, indx_list, dec):
        return _ce_updater.CEUpdater_spin_product_one_atom(self, ref_indx, indx_list, dec)

    def calculate(self, *args):
        return _ce_updater.CEUpdater_calculate(self, *args)

    def undo_changes(self):
        return _ce_updater.CEUpdater_undo_changes(self)

    def clear_history(self):
        return _ce_updater.CEUpdater_clear_history(self)

    def flattened_cluster_names(self, flattened):
        return _ce_updater.CEUpdater_flattened_cluster_names(self, flattened)

    def get_cf(self):
        return _ce_updater.CEUpdater_get_cf(self)

    def get_history(self):
        return _ce_updater.CEUpdater_get_history(self)
CEUpdater_swigregister = _ce_updater.CEUpdater_swigregister
CEUpdater_swigregister(CEUpdater)

class SymbolChange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    indx = _swig_property(_ce_updater.SymbolChange_indx_get, _ce_updater.SymbolChange_indx_set)
    old_symb = _swig_property(_ce_updater.SymbolChange_old_symb_get, _ce_updater.SymbolChange_old_symb_set)
    new_symb = _swig_property(_ce_updater.SymbolChange_new_symb_get, _ce_updater.SymbolChange_new_symb_set)

    def __init__(self):
        this = _ce_updater.new_SymbolChange()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ce_updater.delete_SymbolChange
    __del__ = lambda self: None
SymbolChange_swigregister = _ce_updater.SymbolChange_swigregister
SymbolChange_swigregister(SymbolChange)

class CFHistoryTracker(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ce_updater.new_CFHistoryTracker(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ce_updater.delete_CFHistoryTracker
    __del__ = lambda self: None

    def get_next(self, next_cf, symb_change):
        return _ce_updater.CFHistoryTracker_get_next(self, next_cf, symb_change)

    def get_current(self):
        return _ce_updater.CFHistoryTracker_get_current(self)

    def pop(self, change):
        return _ce_updater.CFHistoryTracker_pop(self, change)

    def insert(self, *args):
        return _ce_updater.CFHistoryTracker_insert(self, *args)

    def clear(self):
        return _ce_updater.CFHistoryTracker_clear(self)

    def history_size(self):
        return _ce_updater.CFHistoryTracker_history_size(self)

    def get_current_active_positions(self):
        return _ce_updater.CFHistoryTracker_get_current_active_positions(self)
CFHistoryTracker_swigregister = _ce_updater.CFHistoryTracker_swigregister
CFHistoryTracker_swigregister(CFHistoryTracker)

def swap(first, second):
    return _ce_updater.swap(first, second)
swap = _ce_updater.swap

class WangLandauSampler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, BC, corrFunc, ecis, permutations, py_wl):
        this = _ce_updater.new_WangLandauSampler(BC, corrFunc, ecis, permutations, py_wl)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ce_updater.delete_WangLandauSampler
    __del__ = lambda self: None

    def get_canonical_trial_move(self, *args):
        return _ce_updater.WangLandauSampler_get_canonical_trial_move(self, *args)

    def step(self):
        return _ce_updater.WangLandauSampler_step(self)

    def run(self, nsteps):
        return _ce_updater.WangLandauSampler_run(self, nsteps)

    def send_results_to_python(self):
        return _ce_updater.WangLandauSampler_send_results_to_python(self)
WangLandauSampler_swigregister = _ce_updater.WangLandauSampler_swigregister
WangLandauSampler_swigregister(WangLandauSampler)

class Histogram(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Nbins, Emin, Emax):
        this = _ce_updater.new_Histogram(Nbins, Emin, Emax)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_bin(self, energy):
        return _ce_updater.Histogram_get_bin(self, energy)

    def get_energy(self, bin):
        return _ce_updater.Histogram_get_energy(self, bin)

    def update(self, bin, mod_factor):
        return _ce_updater.Histogram_update(self, bin, mod_factor)

    def is_flat(self, criteria):
        return _ce_updater.Histogram_is_flat(self, criteria)

    def get_dos_ratio_old_divided_by_new(self, old_bin, new_bin):
        return _ce_updater.Histogram_get_dos_ratio_old_divided_by_new(self, old_bin, new_bin)

    def bin_in_range(self, bin):
        return _ce_updater.Histogram_bin_in_range(self, bin)

    def send_to_python_hist(self, py_hist):
        return _ce_updater.Histogram_send_to_python_hist(self, py_hist)

    def reset(self):
        return _ce_updater.Histogram_reset(self)

    def init_from_pyhist(self, pyhist):
        return _ce_updater.Histogram_init_from_pyhist(self, pyhist)
    __swig_destroy__ = _ce_updater.delete_Histogram
    __del__ = lambda self: None
Histogram_swigregister = _ce_updater.Histogram_swigregister
Histogram_swigregister(Histogram)



