# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ce_updater', [dirname(__file__)])
        except ImportError:
            import _ce_updater
            return _ce_updater
        if fp is not None:
            try:
                _mod = imp.load_module('_ce_updater', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ce_updater = swig_import_helper()
    del swig_import_helper
else:
    import _ce_updater
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



_ce_updater.Status_t_READY_swigconstant(_ce_updater)
Status_t_READY = _ce_updater.Status_t_READY

_ce_updater.Status_t_INIT_FAILED_swigconstant(_ce_updater)
Status_t_INIT_FAILED = _ce_updater.Status_t_INIT_FAILED

_ce_updater.Status_t_NOT_INITIALIZED_swigconstant(_ce_updater)
Status_t_NOT_INITIALIZED = _ce_updater.Status_t_NOT_INITIALIZED
class CEUpdater(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _ce_updater.new_CEUpdater()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, BC, corrFunc, ecis):
        return _ce_updater.CEUpdater_init(self, BC, corrFunc, ecis)

    def ok(self):
        return _ce_updater.CEUpdater_ok(self)

    def get_energy(self):
        return _ce_updater.CEUpdater_get_energy(self)

    def update_cf(self, single_change):
        return _ce_updater.CEUpdater_update_cf(self, single_change)

    def spin_product_one_atom(self, ref_indx, indx_list, dec):
        return _ce_updater.CEUpdater_spin_product_one_atom(self, ref_indx, indx_list, dec)

    def calculate(self, system_changes):
        return _ce_updater.CEUpdater_calculate(self, system_changes)

    def undo_changes(self):
        return _ce_updater.CEUpdater_undo_changes(self)

    def clear_history(self):
        return _ce_updater.CEUpdater_clear_history(self)
    __swig_destroy__ = _ce_updater.delete_CEUpdater
    __del__ = lambda self: None
CEUpdater_swigregister = _ce_updater.CEUpdater_swigregister
CEUpdater_swigregister(CEUpdater)



